var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"List of public functions exposed by CatanEngine","category":"page"},{"location":"api/#Catan.PlayerPublicView","page":"API reference","title":"Catan.PlayerPublicView","text":"PlayerPublicView\n\nCombines the public fields of Player, with some additional fields representing the info available publicly about the private fields.  E.g. everyone knows how many dev cards each player has, but not which ones.\n\n\n\n\n\n","category":"type"},{"location":"api/#Catan.choose_building_location-Tuple{Board, Vector{PlayerPublicView}, RobotPlayer, Vector{Tuple{Int64, Int64}}, Symbol}","page":"API reference","title":"Catan.choose_building_location","text":"`choose_building_location(board::Board, players::Vector{PlayerPublicView}, player::RobotPlayer, candidates::Vector{Tuple{Int, Int}}, building_type::Symbol)::Tuple{Int,Int}`\n\ncandidates is guaranteed to be non-empty.  This method is only called if there is a legal placement available.\n\n\n\n\n\n","category":"method"},{"location":"api/#Catan.generate_random_map-Tuple{String}","page":"API reference","title":"Catan.generate_random_map","text":"Generate a random board conforming to the game constraints set in constants.jl. Save the generated map.\n\n\n\n\n\n","category":"method"},{"location":"api/#Catan.get_player_config","page":"API reference","title":"Catan.get_player_config","text":"```get_player_config(configs, team, key)```\n\nRetrieves the key, potentially overridden for this team.\n\n\n\n\n\n","category":"function"},{"location":"api/#Catan.initialize_player-Tuple{Board, PlayerType}","page":"API reference","title":"Catan.initialize_player","text":"initialize_player(board::Board, player::PlayerType)\n\nThis function is useful to do any one-time computations of the player as soon  as the board is generated.\n\n\n\n\n\n","category":"method"},{"location":"api/#Catan.propose_trade_goods-Tuple{Board, Vector{PlayerType}, PlayerType, Any, Any}","page":"API reference","title":"Catan.propose_trade_goods","text":"`propose_trade_goods(board::Board, players::Vector{PlayerType}, from_player::PlayerType, from_goods, to_goods)`\n\nHandles the action of from_player offering from_goods in exchange for to_goods.  Each of the players in players need to evaluate the proposition and decide if they will accept via choose_accept_trade.\n\nThen, finally, from_player will decide among the accepted players, accepted_public, with whome he will carry out the trade.\n\n\n\n\n\n","category":"method"},{"location":"api/#Catan.read_map-Tuple{Dict}","page":"API reference","title":"Catan.read_map","text":"`read_map(configs::Dict)::Board`\n\nHandles three cases: LOADMAP from file if specified, write the map to SAVEMAP if specified, and if neither are set, then we just generate the map and keep in memory.\n\n\n\n\n\n","category":"method"},{"location":"api/#Catan.run-Tuple{Dict}","page":"API reference","title":"Catan.run","text":"@docs     run(configs::Dict)\n\nRun one game, returning the board and the winner, accepting a config TOML file to  overwrite any default configuration keys set in ./DefaultConfiguration.toml.\n\n\n\n\n\n","category":"method"},{"location":"api/#Catan.save_parameters_after_game_end-Tuple{IO, Board, Vector{PlayerType}, PlayerType, Symbol}","page":"API reference","title":"Catan.save_parameters_after_game_end","text":"save_parameters_after_game_end(board::Board, player::PlayerType)\n\nAfter the game, store or update parameters based on the end state\n\n\n\n\n\n","category":"method"},{"location":"api/#Catan.setup_and_do_robot_game-Tuple{Vector{PlayerType}, Dict{String, Any}}","page":"API reference","title":"Catan.setup_and_do_robot_game","text":"setup_and_do_robot_game(players::Vector{PlayerType}, savefile::Union{Nothing, String} = nothing)\n\nIf no savefile is passed, we use the standard format \"testrobotgamesavefileyyyyMMdd_HHmmss.txt\". If a savefile is passed, we use it to save the game state.  If the file is nonempty, the game will replay up until the end of the save file and then continue to write ongoing game states to the file.\n\n\n\n\n\n","category":"method"},{"location":"api/#Catan.trade_goods_from_player-Tuple{PlayerPublicView, Vector{Symbol}, Vector{Symbol}}","page":"API reference","title":"Catan.trade_goods_from_player","text":"`trade_goods_from_player(from_player::PlayerPublicView, from_goods::Vector{Symbol}, to_goods::Vector{Symbol})`\n\nThis implementation is useful in when a player is evaluating whether they should accept a trade.  To see the \n\n\n\n\n\n","category":"method"},{"location":"#Catan.jl-a-Settlers-of-Catan-game-engine","page":"Catan.jl - a Settlers of Catan game engine","title":"Catan.jl - a Settlers of Catan game engine","text":"","category":"section"}]
}
