var documenterSearchIndex = {"docs":
[{"location":"api/#Configuration-of-a-new-player","page":"Configuration of a new player","title":"Configuration of a new player","text":"","category":"section"},{"location":"api/","page":"Configuration of a new player","title":"Configuration of a new player","text":"Catan.jl allows for full customizability of scripted players using Julia's Type framework.  This is done by defining a new struct and implementing any methods for which you wish to add custom behavior, as detailed below.","category":"page"},{"location":"api/","page":"Configuration of a new player","title":"Configuration of a new player","text":"For more advanced usage, see CatanLearning.jl.","category":"page"},{"location":"api/#Setting-up-the-type","page":"Configuration of a new player","title":"Setting up the type","text":"","category":"section"},{"location":"api/","page":"Configuration of a new player","title":"Configuration of a new player","text":"Define a new player called NewRobotPlayer requires the definition of a mutable struct inheriting from abstract type RobotPlayer,","category":"page"},{"location":"api/","page":"Configuration of a new player","title":"Configuration of a new player","text":"mutable struct NewRobotPlayer <: RobotPlayer\n    player::Player\n\n    # Here, Insert any other fields to store intermediary data or parameters during game\nend","category":"page"},{"location":"api/","page":"Configuration of a new player","title":"Configuration of a new player","text":"To let it interact with the Catan.jl framework, it must have a constructor accepting (team::Symbol, configs::Dict), and it must be registered.  Continuing with our above example,","category":"page"},{"location":"api/","page":"Configuration of a new player","title":"Configuration of a new player","text":"NewRobotPlayer(team::Symbol, configs::Dict) = NewRobotPlayer(Player(team, configs))\nCatan.add_player_to_register(\"New Robot Player Experiment\", (t,c) -> NewRobotPlayer(t,c))","category":"page"},{"location":"api/","page":"Configuration of a new player","title":"Configuration of a new player","text":"and now it can be used in gameplay by configuring the player in the configuration TOML file,","category":"page"},{"location":"api/","page":"Configuration of a new player","title":"Configuration of a new player","text":"...\n[PlayerSettings]\n[PlayerSettings.blue]\nTYPE = \"New Robot Player Experiment\" \n[PlayerSettings.cyan]\nTYPE = \"DefaultRobotPlayer\"\n[PlayerSettings.green]\nTYPE = \"DefaultRobotPlayer\"\n[PlayerSettings.yellow]\nTYPE = \"DefaultRobotPlayer\"\n...","category":"page"},{"location":"api/#Methods-for-defining-custom-player-behavior","page":"Configuration of a new player","title":"Methods for defining custom player behavior","text":"","category":"section"},{"location":"api/","page":"Configuration of a new player","title":"Configuration of a new player","text":"An exhaustive list of methods that can be implemented to override the default behavior (uniform random) of the DefaultRobotPlayer, ordered roughly in order of descending importance for gameplay.","category":"page"},{"location":"api/#High-level-decisions","page":"Configuration of a new player","title":"High-level decisions","text":"","category":"section"},{"location":"api/#Catan.choose_next_action","page":"Configuration of a new player","title":"Catan.choose_next_action","text":"choose_next_action(board::Board, players::Vector{PlayerPublicView}, player::RobotPlayer, \nactions::Set{PreAction})::Function\n\nGiven a Set of PreAction legal move categories, decide what will be taken as the next action. The return Function needs to accept a Game, Board, PlayerType triple.\n\nTODO integrate with CatanLearning Action type.  This should not be returning a function.\n\n\n\n\n\n","category":"function"},{"location":"api/#Construction","page":"Configuration of a new player","title":"Construction","text":"","category":"section"},{"location":"api/#Catan.choose_building_location","page":"Configuration of a new player","title":"Catan.choose_building_location","text":"choose_building_location(board::Board, players::Vector{PlayerPublicView}, \nplayer::RobotPlayer, candidates::Vector{Tuple{Int, Int}}, building_type::Symbol\n)::Tuple{Int,Int}\n\ncandidates is guaranteed to be non-empty.  This method is only called if there is a legal placement available.\n\n\n\n\n\n","category":"function"},{"location":"api/#Catan.choose_road_location","page":"Configuration of a new player","title":"Catan.choose_road_location","text":"choose_road_location(board::Board, players::Vector{PlayerPublicView}, \nplayer::RobotPlayer, candidates::Vector{Vector{Tuple{Int, Int}}})\n::Vector{Tuple{Int, Int}}\n\ncandidates is guaranteed to be non-empty.  Given all legal road placements,  return a Vector containing two coordinates signifying the road placement choice.\n\n\n\n\n\n","category":"function"},{"location":"api/#Robbers-and-knights","page":"Configuration of a new player","title":"Robbers and knights","text":"","category":"section"},{"location":"api/#Catan.choose_place_robber","page":"Configuration of a new player","title":"Catan.choose_place_robber","text":"choose_place_robber(board::Board, players::Vector{PlayerPublicView}, player::RobotPlayer, \ncandidates::Vector{Symbol})::Union{Nothing, Symbol}\n\n\n\n\n\n","category":"function"},{"location":"api/#Catan.choose_robber_victim","page":"Configuration of a new player","title":"Catan.choose_robber_victim","text":"choose_robber_victim(board::Board, player::RobotPlayer, \npotential_victims::PlayerPublicView...)::PlayerPublicView\n\nThe robber has already been placed, so here player decided which adjacent player to steal from.\n\n\n\n\n\n","category":"function"},{"location":"api/#Catan.choose_one_resource_to_discard","page":"Configuration of a new player","title":"Catan.choose_one_resource_to_discard","text":"choose_one_resource_to_discard(board::Board, player::RobotPlayer)::Symbol\n\nReturned symbol must be present in both Catan.RESOURCES and keys(player.resources). \n\n\n\n\n\n","category":"function"},{"location":"api/#Development-cards","page":"Configuration of a new player","title":"Development cards","text":"","category":"section"},{"location":"api/#Catan.choose_resource_to_draw","page":"Configuration of a new player","title":"Catan.choose_resource_to_draw","text":"choose_resource_to_draw(board, players::Vector{PlayerPublicView}, \nplayer::RobotPlayer)::Symbol\n\nCalled two times during the Year of Plenty development card action.  TODO inconsistent naming.\n\n\n\n\n\n","category":"function"},{"location":"api/#Catan.choose_monopoly_resource","page":"Configuration of a new player","title":"Catan.choose_monopoly_resource","text":"choose_monopoly_resource(board::Board, players::Vector{PlayerPublicView}, \nplayer::RobotPlayer)::Symbol\n\nCalled during the Monopoly development card action.  Choose the resource to steal from each player based on public information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Trading","page":"Configuration of a new player","title":"Trading","text":"","category":"section"},{"location":"api/#Catan.choose_accept_trade","page":"Configuration of a new player","title":"Catan.choose_accept_trade","text":"choose_accept_trade(board::Board, player::RobotPlayer, from_player::PlayerPublicView, \nfrom_goods::Vector{Symbol}, to_goods::Vector{Symbol})::Bool\n\nDecides whether player will accept the trade from from_player.  The trade is not performed within this function.\n\n\n\n\n\n","category":"function"},{"location":"api/#Catan.choose_who_to_trade_with","page":"Configuration of a new player","title":"Catan.choose_who_to_trade_with","text":"choose_who_to_trade_with(board::Board, player::RobotPlayer, \nplayers::Vector{PlayerPublicView})::Symbol\n\nCalled when multiple other players have accepted a trade offer via choose_accept_trade, and now the trade initiator, player, selects which player will be selected.\n\n\n\n\n\n","category":"function"},{"location":"api/#Optimization-and-data-generation","page":"Configuration of a new player","title":"Optimization and data generation","text":"","category":"section"},{"location":"api/#Catan.initialize_player","page":"Configuration of a new player","title":"Catan.initialize_player","text":"initialize_player(board::Board, player::PlayerType)\n\nThis function is useful to do any one-time computations of the player as soon  as the board is generated.\n\n\n\n\n\n","category":"function"},{"location":"api/#Catan.do_post_game_action","page":"Configuration of a new player","title":"Catan.do_post_game_action","text":"do_post_game_action(game::Game, board::Board, players::Vector{T}, player::T, \nwinner::Union{PlayerType, Nothing}) where T <: PlayerType\n\nPerform any post-game actions while the full Game and Board states are in memory, and the  winner has been defined.  Feature generation is one example.  See CatanLearning.jl for usage.\n\n\n\n\n\ndo_post_game_action(game::Game, board::Board, players::Vector{T}, \nwinner::Union{PlayerType, Nothing}) where T <: PlayerType\n\nPerform any post-game actions while the full Game and Board states are in memory, and the  winner has been defined.  Feature generation is one example.  See CatanLearning.jl for usage.\n\n\n\n\n\n","category":"function"},{"location":"dev/#Miscellaneous-Developer-Notes","page":"Miscellaneous Developer Notes","title":"Miscellaneous Developer Notes","text":"","category":"section"},{"location":"dev/#Board-representation","page":"Miscellaneous Developer Notes","title":"Board representation","text":"","category":"section"},{"location":"dev/","page":"Miscellaneous Developer Notes","title":"Miscellaneous Developer Notes","text":"        (7)      (6) \n       61-62-63-64-65-66-67\n       |  Q  |  R  |  S  | (5)\n    51-52-53-54-55-56-57-58-59\n(8) |  M  |  N  |  O  |  P  |\n 41-42-43-44-45-46-47-48-49-4!-4@\n |  H  |  I  |  J  |  K  |  L  |(4)\n 31-32-33-34-35-36-37-38-39-3!-3@\n (9)|  D  |  E  |  F  |  G  |\n    21-22-23-24-25-26-27-28-29\n       |  A  |  B  |  C  |(3)\n       11-12-13-14-15-16-17\n        (1)      (2) ","category":"page"},{"location":"dev/","page":"Miscellaneous Developer Notes","title":"Miscellaneous Developer Notes","text":"Note: the numbers (x) are the ports","category":"page"},{"location":"dev/#Map-file","page":"Miscellaneous Developer Notes","title":"Map file","text":"","category":"section"},{"location":"dev/","page":"Miscellaneous Developer Notes","title":"Miscellaneous Developer Notes","text":"The map file (data/sample.csv in the above example) is a 3-column csv file with values Tile,Dice,Resource where:","category":"page"},{"location":"dev/","page":"Miscellaneous Developer Notes","title":"Miscellaneous Developer Notes","text":"Tile is a single capital letter A-S denoting the hexagon tile corresponding to the above board sketch.   Warning These are purely internal IDs and do not correspond to the letters on the physical Catan tokens.\nDice is a single integer 2-12 denoting the dice token placed on the hexagon (use 7 for the desert)\nResource is a single letter denoting the resource: w[ood],s[tone],g[rain],b[rick],p[asture]","category":"page"},{"location":"dev/#Debugging","page":"Miscellaneous Developer Notes","title":"Debugging","text":"","category":"section"},{"location":"dev/","page":"Miscellaneous Developer Notes","title":"Miscellaneous Developer Notes","text":"For convenience, setting PRINT_BOARD = true in the configuration file will print a color representation of the map state after each turn:","category":"page"},{"location":"dev/","page":"Miscellaneous Developer Notes","title":"Miscellaneous Developer Notes","text":"(Image: image)","category":"page"},{"location":"#Catan.jl-a-Settlers-of-Catan-game-engine","page":"Catan.jl - a Settlers of Catan game engine","title":"Catan.jl - a Settlers of Catan game engine","text":"","category":"section"},{"location":"","page":"Catan.jl - a Settlers of Catan game engine","title":"Catan.jl - a Settlers of Catan game engine","text":"A full Julia engine for playing the extremely popular board game Settlers of Catan with a mixture of human and custom scripted players.  For examples of scripted players and how to apply more advanced ML/RL algorithms, check out the sister repo CatanLearning.jl.","category":"page"},{"location":"#How-to-run-the-game","page":"Catan.jl - a Settlers of Catan game engine","title":"How to run the game","text":"","category":"section"},{"location":"","page":"Catan.jl - a Settlers of Catan game engine","title":"Catan.jl - a Settlers of Catan game engine","text":"To launch a new game, set up a configuration file with the desired player types, and any gameplay configuration.","category":"page"},{"location":"","page":"Catan.jl - a Settlers of Catan game engine","title":"Catan.jl - a Settlers of Catan game engine","text":"For example,","category":"page"},{"location":"","page":"Catan.jl - a Settlers of Catan game engine","title":"Catan.jl - a Settlers of Catan game engine","text":"# Changing any configs you want (defaults in ./DefaultConfiguration.toml)\nPRINT_BOARD = true\n\n# Setting up the types of players.  \n# One human (blue) against three scripted players of type `DefaultRobotPlayer`\n[PlayerSettings]\n[PlayerSettings.blue]\nTYPE = \"HumanPlayer\"\n[PlayerSettings.cyan]\nTYPE = \"DefaultRobotPlayer\"\n[PlayerSettings.green]\nTYPE = \"DefaultRobotPlayer\"\n[PlayerSettings.yellow]\nTYPE = \"DefaultRobotPlayer\"","category":"page"},{"location":"","page":"Catan.jl - a Settlers of Catan game engine","title":"Catan.jl - a Settlers of Catan game engine","text":"If this file is saved as Configuration.toml, then we can run one game with the following script:","category":"page"},{"location":"","page":"Catan.jl - a Settlers of Catan game engine","title":"Catan.jl - a Settlers of Catan game engine","text":"using Catan\nconfigs = Catan.parse_configs(\"Configuration.toml\")\nboard, winner = Catan.run(configs)","category":"page"}]
}
